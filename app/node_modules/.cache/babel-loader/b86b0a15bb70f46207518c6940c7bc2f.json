{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tiago\\\\Desktop\\\\CenasJS\\\\cenas\\\\src\\\\components\\\\MovieCards.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useRef, useEffect } from \"react\";\nimport { useParams, Link, Navigate } from \"react-router-dom\";\nimport MoviePoster from \"./MoviePoster\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieCards = () => {\n  _s();\n\n  const {\n    q\n  } = useParams();\n  const hasFetched = useRef(false);\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!hasFetched.current) {\n      fetch(`http://omdbapi.com/?apikey=470179fa&s=${q}`).then(response => response.json()).then(data => {\n        setMovies(data.Search);\n      });\n      hasFetched.current = true;\n    }\n  }, [q, movies, setMovies]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: isLoading ? movies.length !== 0 ? movies.map(movie => {\n      return /*#__PURE__*/_jsxDEV(MoviePoster, {\n        name: movie.Title\n      }, movie.imdbID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 20\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MovieCards, \"pZuasaWvhdUJNiAg/xMnDsEcV80=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieCards;\nexport default MovieCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieCards\");","map":{"version":3,"sources":["C:/Users/Tiago/Desktop/CenasJS/cenas/src/components/MovieCards.js"],"names":["React","useState","useRef","useEffect","useParams","Link","Navigate","MoviePoster","MovieCards","q","hasFetched","movies","setMovies","isLoading","setIsLoading","current","fetch","then","response","json","data","Search","length","map","movie","Title","imdbID"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,QAA1B,QAA0C,kBAA1C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,aAAP;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAQL,SAAS,EAAvB;AACA,QAAMM,UAAU,GAAGR,MAAM,CAAC,KAAD,CAAzB;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACO,UAAU,CAACK,OAAhB,EAAyB;AACvBC,MAAAA,KAAK,CAAE,yCAAwCP,CAAE,EAA5C,CAAL,CACGQ,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdR,QAAAA,SAAS,CAACQ,IAAI,CAACC,MAAN,CAAT;AACD,OAJH;AAKAX,MAAAA,UAAU,CAACK,OAAX,GAAqB,IAArB;AACD;AACF,GATQ,EASN,CAACN,CAAD,EAAIE,MAAJ,EAAYC,SAAZ,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,cACGC,SAAS,GACRF,MAAM,CAACW,MAAP,KAAkB,CAAlB,GACEX,MAAM,CAACY,GAAP,CAAYC,KAAD,IAAW;AACpB,0BAAO,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEA,KAAK,CAACC;AAAzB,SAAqCD,KAAK,CAACE,MAA3C;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,CADF,gBAKE,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YANM,gBASR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhCD;;GAAMlB,U;UACUJ,S;;;KADVI,U;AAkCN,eAAeA,UAAf","sourcesContent":["import { React, useState, useRef, useEffect } from \"react\";\r\nimport { useParams, Link, Navigate } from \"react-router-dom\";\r\nimport MoviePoster from \"./MoviePoster\";\r\nimport \"./index.css\";\r\n\r\nconst MovieCards = () => {\r\n  const { q } = useParams();\r\n  const hasFetched = useRef(false);\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasFetched.current) {\r\n      fetch(`http://omdbapi.com/?apikey=470179fa&s=${q}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setMovies(data.Search);\r\n        });\r\n      hasFetched.current = true;\r\n    }\r\n  }, [q, movies, setMovies]);\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      {isLoading ? (\r\n        movies.length !== 0 ? (\r\n          movies.map((movie) => {\r\n            return <MoviePoster name={movie.Title} key={movie.imdbID} />;\r\n          })\r\n        ) : (\r\n          <Navigate to=\"/\" />\r\n        )\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieCards;\r\n"]},"metadata":{},"sourceType":"module"}